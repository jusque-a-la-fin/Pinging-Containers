services:
  rabbitmq:
    image: rabbitmq:4.0.6-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"  
      - "15672:15672" 
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

# Frontend-сервис
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.Frontend
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - backend
  
  # Backend-сервис
  backend:
    build:
      context: .
      dockerfile: Dockerfile.Backend
    container_name: backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy

  # База данных PostgreSQL
  database:
    image: postgres:17.2-alpine3.21
    container_name: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: monitoring
    ports:
      - "5433:5432"
    volumes:
      - database:/var/lib/postgresql/data
      - ./sql-scripts/monitoring.sql:/docker-entrypoint-initdb.d/monitoring.sql

  # Сервис Pinger
  pinger:
    build:
      context: .
      dockerfile: Dockerfile.Pinger
    container_name: pinger
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8081:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy

  busybox:
    image: busybox
    command: ["tail", "-f", "/dev/null"] 

  alpine:
    image: alpine
    command: ["tail", "-f", "/dev/null"] 

  debian:
    image: debian:bookworm-slim
    command: ["tail", "-f", "/dev/null"]

  memcached:
    image: memcached
    command: ["tail", "-f", "/dev/null"]

volumes:
  database:
    driver: local